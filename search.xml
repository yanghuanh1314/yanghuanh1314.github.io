<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python学习笔记整理及感想</title>
      <link href="2021/05/11/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86%E5%8F%8A%E6%84%9F%E6%83%B3/"/>
      <url>2021/05/11/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86%E5%8F%8A%E6%84%9F%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<p><strong>Python学习笔记整理及感想</strong></p><span id="more"></span>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python之文件和数据格式学习笔记</title>
      <link href="2021/05/11/Python%E4%B9%8B%E6%96%87%E4%BB%B6%E5%92%8C%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20(1)/"/>
      <url>2021/05/11/Python%E4%B9%8B%E6%96%87%E4%BB%B6%E5%92%8C%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20(1)/</url>
      
        <content type="html"><![CDATA[<p><strong>python之文件和数据格式学习笔记</strong></p><span id="more"></span><p>@<a href="%E8%BF%99%E6%98%AF%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95">TOC</a></p><h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1,前言"></a>1,前言</h1><p>职场人士都在学Python，说是可以文件和数据，处理Word、xlsx、PDF等等非常方便。学到了就是加分，升职不是梦。当然这一章不会有这部分内容，没学，不会。但是这可能是一个入门，用Python打开文件？修改文件？·····</p><h1 id="2-文件的使用"><a href="#2-文件的使用" class="headerlink" title="2,文件的使用"></a>2,文件的使用</h1><h2 id="2-1-文件的类型"><a href="#2-1-文件的类型" class="headerlink" title="2.1,文件的类型"></a>2.1,文件的类型</h2><h3 id="2-1-1文件的理解"><a href="#2-1-1文件的理解" class="headerlink" title="2.1.1文件的理解"></a>2.1.1文件的理解</h3><p>提起类型，必先理解这是什么，文件是啥呢？</p><ul><li>文件是数据的抽象和集合 </li><li>文件是存储在辅助存储器上的数据序列</li><li>文件是数据存储的一种形式</li><li>文件展现形态：文本文件和二进制文件</li></ul><p> 打了四行定义，不长不短。说说我的看法叭。把数据看成抽象，多条相同类型的数据就要放进一个文件，此时此刻，文件就像是一个大集合。<img src="https://img-blog.csdnimg.cn/20210506154245717.png" alt="在这里插入图片描述"><br>成绩表.xlsx里面就是有很多数据。把这些数据都放到成绩表.xlsx里面，因此像个大集合。<br>Q：什么是辅助存储器？<br>电脑主机板外的储存器。如硬碟、光碟、随身碟等。就是放盘里。这里应该是指文件夹吧？文件夹也是一种文件。<img src="https://img-blog.csdnimg.cn/20210506155422648.png"><br>存储在硬盘里，有顺序的排列着。<br>好，什么是二进制文件和文本文件</p><h3 id="2-1-2-文本文件与二进制文件"><a href="#2-1-2-文本文件与二进制文件" class="headerlink" title="2.1.2,文本文件与二进制文件"></a>2.1.2,文本文件与二进制文件</h3><p>放在前面：从文件的名字可以看出他们文件的展示方式不同，看到二进制不就是0和1组成的一大串数字吗？<br>所有的文件都是以二进制的方式存储。。我好闲记得CPU里面都是二进制来着。<br>所以文件都采用这两种方式展示，</p><ul><li>文本文件</li></ul><p>由单一特定编码组成的文件，utf-8<br>由于存在编码，也被看成是存储着的长字符串<br>适用于例如：.txt文件、.py文件</p><p> -二进制文件<br>直接由比特0和1组成，没有同意字符编码<br>一般存在二进制0和1的组织结构，即文件格式<br>适用于例如：.png文件、.AVI文件</p><p>这就是他们的区别，实际上并不难，一个字符串，一0和1</p><h2 id="2-2-文件的打开和关闭"><a href="#2-2-文件的打开和关闭" class="headerlink" title="2.2,文件的打开和关闭"></a>2.2,文件的打开和关闭</h2><p>以上都是叙述，那么正文现在开始！<br>文件的操作步骤：打开—-操作—–关闭</p><ol><li>文件的打开：</li></ol><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> open<span class="token punctuation">(</span>  <span class="token punctuation">,</span>  <span class="token punctuation">)</span></code></pre><p>open打开的意思，<br>文件的存储状态变为文件的文件的占用状态<br>这句语句应该是这样滴<br><img src="https://img-blog.csdnimg.cn/20210506190618125.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MzQ4ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class=" language-python"><code class="language-python"><span class="token operator">&lt;</span>变量名<span class="token operator">></span> <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token operator">&lt;</span>文件名<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>打开模式<span class="token operator">></span><span class="token punctuation">)</span></code></pre><p>文件名里面包括文件的路径和名称，如果和源文件同一路径可以忽略不计。<br>打开模式：文本or二进制、读or写<br>还有其他的打卡方式：<br>| 文件的打开方式 | 描述         |<br>|:——-:| :————-|<br>| “r” |只读模式，默认值，如果文件不存在返回FileNotFoundError|<br>|”w”|覆盖写模式，文件不存在则创建，存在则完全覆盖<br>|“x”|创建写模式，文件不存在则创建，存在则返回FileExistsError<br>|“a”|追加写模式，文件不存在则创建，存在则在文件最后最佳内容|<br>|”b”|二进制文件模式|<br> |”t”|文本文件模式。默认值|<br> |”+”|与r/w/x/a一同使用，在原功能基础上增加同时读写功能|<br>覆盖、创建、追加我想都不难理解吧。<br>例如：</p><pre class=" language-python"><code class="language-python">f <span class="token operator">=</span> open<span class="token punctuation">(</span>f<span class="token punctuation">.</span>txt<span class="token punctuation">,</span> w<span class="token punctuation">)</span></code></pre><ol start="2"><li>文件的关闭：</li></ol><pre class=" language-python"><code class="language-python">a<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#&lt;变量名>.close()</span></code></pre><p>close关闭的意思。有打开文件则就有关闭文件，因此<code>open()</code>与<code>.close()</code>是一对。。</p><h2 id="2-3-文件的内容读取"><a href="#2-3-文件的内容读取" class="headerlink" title="2.3,文件的内容读取"></a>2.3,文件的内容读取</h2><p>我们先定义一段文本：<br><img src="https://img-blog.csdnimg.cn/20210507115109398.png" alt="在这里插入图片描述"></p><p>打开这段文本的代码</p><pre class=" language-python"><code class="language-python">f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"1.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span></code></pre><table><thead><tr><th align="center">操作方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center"><f>.read(size=-1)</td><td align="left">读入全部内容，如果给出参数，读入前size长度</td></tr></tbody></table><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>s <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>linux<span class="token comment" spellcheck="true">#size为5</span><span class="token operator">>></span><span class="token operator">></span>s <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>linuxPythoncJavac<span class="token operator">+</span><span class="token operator">+</span><span class="token comment" spellcheck="true">#size没有参数在打印全部文本</span></code></pre><p> 操作方法| 描述         |<br>|:——-:| :————-|<br>|  <f>.readline(size=-1)|读入一行内容，如果给出参数，读入该行前size长度</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>s <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>lin<span class="token operator">>></span><span class="token operator">></span>s <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>linnx</code></pre><p>操作方法| 描述         |<br>|:——-:| :————-|<br>|  <f>.readlines(hint=-1)|读入文本所有行，    一每行为元素形成列表，如果给出参数，读入前hint行</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>s <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'linux\n'</span><span class="token punctuation">,</span> <span class="token string">'Python\n'</span><span class="token punctuation">,</span> <span class="token string">'c\n'</span><span class="token punctuation">,</span> <span class="token string">'Java\n'</span><span class="token punctuation">,</span> <span class="token string">'c++'</span><span class="token punctuation">]</span></code></pre><p>这就是这三个方法，论这三个方法有什么区别，很简单</p><ul><li>read：用通俗易懂的话说读全文，返回字符串类型</li><li>ReadLine：读这行，还是字符串类型</li><li>Readlines：可以看做读全文，每一行为元素形成一个列</li></ul><p>提一下遍历文本</p><ul><li>全文遍历：简单实用的.read()方法，</li><li>逐行遍历：分享一段代码<br>```python<blockquote><blockquote><blockquote><p>f = open(“1.txt”,”r”)<br>for line in f.readlines(-1):<br>   print(line)<br>linux</p></blockquote></blockquote></blockquote></li></ul><p>Python</p><p>c</p><p>Java</p><p>c++</p><pre><code>为什么会是这样## 2.4,数据文件的写入文件的读取一共说了三个方法，有读取，那么应该有写入，怎么用Python进行写呢，一起看看吧 操作方法| 描述         ||:-------:| :-------------||  &lt;f&gt;.write(s)|向文件写入一个字符串或字节流```pythonf = open(&quot;测试.txt&quot;,&quot;w&quot;)f.write(&quot;人生苦短，我学Pyhon&quot;)f.close()</code></pre><p>注意那个“w”，为什么写不进去，为什么写进去是空白的，前者与“w<br>”有关系，写模式，后者，记得close()</p><p>操作方法| 描述         |<br>|:——-:| :————-|<br>|  <f>.writelines(lines)|将一个元素全为字符串 的列表写入文件</p><pre class=" language-python"><code class="language-python">f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"测试.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"中国"</span><span class="token punctuation">,</span><span class="token string">"法国"</span><span class="token punctuation">,</span><span class="token string">"美国"</span><span class="token punctuation">]</span>f<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>中国法国美国</code></pre><p>操作方法| 描述         |<br>|:——-:| :————-|<br>|  <f>.seek(offset)|改变当前文件操作指针的位置，offset含义如下：0–文件开头；1—当前位置；2—-文件结尾</p><pre class=" language-python"><code class="language-python"></code></pre><h1 id="一维数据的格式化和处理"><a href="#一维数据的格式化和处理" class="headerlink" title="一维数据的格式化和处理"></a>一维数据的格式化和处理</h1><h2 id="数据组织的维度"><a href="#数据组织的维度" class="headerlink" title="数据组织的维度"></a>数据组织的维度</h2><p>从一个数据到一组数据，一个数据表达的含义到一组数据表达一个或多个含义。</p><ol><li>维度：一组数的组织形式</li><li>一维数据：由对等关系的有序或无序数据结构，对应标列表、数组和集合等概念。</li><li>二维数据：由多个一维数据构成，是一维数据的组合形式。表格是典型的二维数据，其中表头是二维数据的一部分。</li><li>多维数据：由一维或二维数据在新维度上扩展形式。</li><li>高维数据：仅利用最基本的    二元关系展示数据间的复杂结果。键值对<br>说了这么多，其实我也没明白。</li><li>一维数据类似线性。<br>几个同学的成绩：99、89、75、65、88；[“中国”,”法国”,”美国”]，可以用集合、数组或者列表定义。就是一维数据。</li><li>二维数据：类似平面。可以说是用 两个点确定一个数据。<br>为什么会是表格呢，以成绩单为例，要找出一人的成绩，就需要他的姓名和你要找的哪一科成绩。定位。</li><li>高维数据，立体。对应应该是三点确定一个数据<br>数据的操作周期：<br>存储&lt;-&gt;表示&lt;-&gt;操作<h2 id="一维数据的表示"><a href="#一维数据的表示" class="headerlink" title="一维数据的表示"></a>一维数据的表示</h2>一维数据现在了解了吗</li><li>是个有序数列，用列表类型。</li></ol><p>因此列表类型可以表示一维有序序列<br>for循环可以对数列进行遍历，从而方便对数据进行处理。</p><ol start="2"><li>是个无序数列，用集合类型<br>同上也可以for循环遍历。</li></ol><h2 id="一维数据的存储"><a href="#一维数据的存储" class="headerlink" title="一维数据的存储"></a>一维数据的存储</h2><ol><li>空格存储<br>使用一个或多个空格存储，不换行。但是数据中不可以存在空格</li></ol><pre><code>Java liunx c python hexo</code></pre><ol start="2"><li><p>逗号分隔<br>使用英文半角逗号分隔数据进行存储，不换行，但是和空格一样，数据中不可以出现英文半角逗</p><pre><code>Java,liunx,c,python,hexo</code></pre></li><li><p>其他方式：<br>使用其他符号或符号组合分隔，建议采用特殊符号：但是需要根据数据特点定义，通用性较差</p></li></ol><pre><code>Java$liunx$c$python$hexo</code></pre><pre><code>Java&amp;liunx&amp;c&amp;python&amp;hexo</code></pre><h2 id="一维数据的处理"><a href="#一维数据的处理" class="headerlink" title="一维数据的处理"></a>一维数据的处理</h2><p>存储&lt;-&gt;表示</p><ul><li>将存储的数据写入程序</li><li>将程序表示的数据写入文件</li></ul><ol><li><p>从空格分隔的文件读入数据<br>定义一段文本：<br><img src="https://img-blog.csdnimg.cn/20210508103513373.png" alt="在这里插入图片描述"></p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"1.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>s <span class="token operator">=</span> f<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'Java'</span><span class="token punctuation">,</span> <span class="token string">'liunx'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">,</span> <span class="token string">'hexo'</span><span class="token punctuation">]</span></code></pre><p>当然举一反三，特殊符号的那个</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>ls <span class="token operator">=</span> txt<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span></code></pre><p>以上是读，那么接下来就是写了</p></li><li><p>空格分隔方式 </p><pre class=" language-python"><code class="language-python">ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"python"</span><span class="token punctuation">,</span><span class="token string">"Java"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">]</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"f.TXT"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210508105433810.png" alt="在这里插入图片描述"></p></li><li><p>特殊分隔方式 </p><pre class=" language-python"><code class="language-python">f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"$ "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li></ol><p>不难发现这两个方法我们都很熟悉。</p><h1 id="二维数据的格式化和处理"><a href="#二维数据的格式化和处理" class="headerlink" title="二维数据的格式化和处理"></a>二维数据的格式化和处理</h1><h2 id="二维数据的表示"><a href="#二维数据的表示" class="headerlink" title="二维数据的表示"></a>二维数据的表示</h2><p>前面说列表不可以用于表达二维数据，现在可以了，但是有个条件：二维列表。什么是二维列表？很简单</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><p>列表里面还有列表。则就是一个二维的。当然二维列表也是可以遍历的，两层for即可。</p><pre class=" language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span>count <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> list1<span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> i<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210508123345805.png" alt="在这里插入图片描述"><br>方法还有很多，这不是唯一的求解</p><h2 id="CSV数据存储格式"><a href="#CSV数据存储格式" class="headerlink" title="CSV数据存储格式"></a>CSV数据存储格式</h2><p>1.什么是CSV？</p><ul><li>Comma-Separated Values</li><li>国际通用的一维二维数据存储格式，一般.csv是扩展名</li><li>每行一个一维数据，采用逗号分隔，无空格。</li><li>Excel和一遍编辑软件都可以读入或另存为CSV文件</li></ul><p>什么意思呢？国际都认，我记得在电脑里看见过这类文件。<br>用记事本打开应该是这样~<br><img src="https://img-blog.csdnimg.cn/20210508130040991.png" alt="在这里插入图片描述"></p><ul><li><p>如果某个元素缺失，逗号依旧保留。</p></li><li><p>二维数据的表头可以作为数据存储，也阔以另行存储。</p></li><li><p>逗号为英文半角逗号，逗号与数据之间无额外空格。</p></li></ul><p>这个都很好理解。</p><ol><li><p>怎么存储呢<br>按行存？按列存？</p></li><li><p>按行存或者按列存都可以，这个有程序而定。</p></li><li><p>一般索引习惯：Is[row][column]，先行后列</p></li><li><p>根基一般习惯，外层列表每个元素是一行，按行存。</p></li></ol><h2 id="二维数据的存储"><a href="#二维数据的存储" class="headerlink" title="二维数据的存储"></a>二维数据的存储</h2><ol><li>.从CSV格式文件中读入数据。<br>我们先定义一段文本<br><img src="https://img-blog.csdnimg.cn/20210508135059981.png" alt="在这里插入图片描述"></li></ol><pre class=" language-python"><code class="language-python">fo <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"fname.csv"</span><span class="token punctuation">)</span>ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> line <span class="token keyword">in</span> fo<span class="token punctuation">:</span>    line <span class="token operator">=</span> line<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>    ls <span class="token punctuation">.</span>append<span class="token punctuation">(</span>line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span>fo<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p> 结果：<br> <img src="https://img-blog.csdnimg.cn/20210508135205719.png" alt="在这里插入图片描述"></p><ol start="2"><li>将数据写入CSV格式文件<pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"4"</span><span class="token punctuation">,</span><span class="token string">"5"</span><span class="token punctuation">,</span><span class="token string">"6"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"7"</span><span class="token punctuation">,</span><span class="token string">"8"</span><span class="token punctuation">,</span><span class="token string">"9"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"fname.csv"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">)</span><span class="token keyword">for</span> a <span class="token keyword">in</span> s<span class="token punctuation">:</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>   </code></pre>.<img src="https://img-blog.csdnimg.cn/2021050813383313.png" alt="在这里插入图片描述"><br>有图有真相</li><li>二维数据的逐一处理<br>这部分我们提前了。两个for即可<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>这就是这一章的学习笔记，写完这篇笔记，我也就了解的差不多了，学会了，<br>当然学到这里还不算自动化办公的成果，与其用Python写文章，在生成Word，那我为什么不直接打开Word呢，还不用写代码。<br>当然可以吧表格的数据导出来求最大值，最小值。<br>如果看到了这里，谢谢您，如果对您有帮助，这是我的荣幸。如有有不足，欢迎指出，谢谢您</li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python之组合数据类型学习笔记</title>
      <link href="2021/05/11/python%E4%B9%8B%E7%BB%84%E5%90%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>2021/05/11/python%E4%B9%8B%E7%BB%84%E5%90%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><strong>python之组合数据类型笔记</strong></p><span id="more"></span><p>话不多说，直接看目录<br>@<a href="%E7%AC%94%E8%AE%B0%E7%9B%AE%E5%BD%95">TOC</a></p><h1 id="一，前言"><a href="#一，前言" class="headerlink" title="一，前言"></a>一，前言</h1><p>相信大家每天都在接触数据吧，电脑的普及还有发展很大程度都是和数据有关，个人观点。数据可谓是无处不在</p><h1 id="二，集合类型及操作"><a href="#二，集合类型及操作" class="headerlink" title="二，集合类型及操作"></a>二，集合类型及操作</h1><h2 id="1，集合类型的定义"><a href="#1，集合类型的定义" class="headerlink" title="1，集合类型的定义"></a>1，集合类型的定义</h2><p>集合是多个元素的无序组合<br>集合类型与数学中集合的概念一致。<br>集合元素无序，每个元素唯一，不存在相同元素。<br>集合元素不可更改，不能是可变数据类型。</p><p>我想起了高中第一节数学课，就是集合。在数学中集合也是这么说的吧，不可以相同元素，无序，</p><p>集合用大括号{}表示，元素间用逗号分隔。<br>建立集合类型用{}或set()。<br>建立空集合类型，必须用set()。</p><p>我们来演示一波操作</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>a <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"中国北京","abc",123,("人生苦短，我学pyhon")&amp;#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'中国北京', '人生苦短，我学pyhon', 'abc', 123&amp;#125;</span><span class="token operator">>></span><span class="token operator">></span>b <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">"中国北京,abc,123,人生苦短，我学pyhon"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;123, '中国北京', 'abc', '人生苦短，我学pyhon'&amp;#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'中', '京', '3', '苦', 'a', '人', ',', 'b', '生', 'n', '1', '国', 'o', 'h', 'y', '短', '学', '2', 'p', 'c', '，', '我', '北'&amp;#125;</span></code></pre><p>从中我发现了个问题a、b两个集合元素相同，但是他们的输出不同，这是为什么？？？<br>个人观点导入一个jieba库，用它的全模式是不是会出现第一种情况?</p><h2 id="2，集合操作符"><a href="#2，集合操作符" class="headerlink" title="2，集合操作符"></a>2，集合操作符</h2><p>字符串有操作符，索引[]。还记得！那么集合类型也有操作符。<br>前面提到过集合类型和数学中的集合概念一样，他们也有交、并、差、补。当初学这块内容时就是记不住交集（∩）和并集（∪）这两个符合，考试前一晚 晚自习还在想上优并下优交？下优并上优交？小朋友你是否有很多问号？？？？？<br><img src="https://img-blog.csdnimg.cn/20200707150640542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MzQ4ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200707152546586.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MzQ4ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200707154658928.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MzQ4ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如果说第二张图片是标准版，难么后面的就是增强版，Pro。手机的后缀名有个Pro，哈哈哈<br>康康这三张图片，代码安排上~</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>A <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"p","y",123&amp;#125;</span><span class="token operator">>></span><span class="token operator">></span>B <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">"python123"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>A <span class="token operator">|</span> B<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'n', 'p', 'o', 'h', '1', '3', 'y', '2', 't', 123&amp;#125;#集合中不可以出现相同元素。“p、y保留一组”</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>A <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"p","y",123&amp;#125;</span><span class="token operator">>></span><span class="token operator">></span>B <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">"python123"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>A <span class="token operator">-</span> B<span class="token number">123</span><span class="token comment" spellcheck="true">#set()函数会把里面的元素一一分开，123.</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>A <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"p","y",123&amp;#125;</span><span class="token operator">>></span><span class="token operator">></span>B <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">"python123"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>A <span class="token operator">&amp;</span> B<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'p', 'y'&amp;#125;#同时只有p、y。</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>A <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"p","y",123&amp;#125;</span><span class="token operator">>></span><span class="token operator">></span>B <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">"python123"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>A <span class="token operator">^</span> B<span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;#不相同元素</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>A <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"p","y",123&amp;#125;</span><span class="token operator">>></span><span class="token operator">></span>B <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">"python123"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>A <span class="token operator">&lt;</span> b<span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span>A <span class="token operator">></span> b<span class="token boolean">False</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>A <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"p","y",123&amp;#125;</span><span class="token operator">>></span><span class="token operator">></span>B <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">"py"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>A <span class="token operator">&lt;</span> b<span class="token comment" spellcheck="true">#子集关系。</span><span class="token boolean">True</span><span class="token comment" spellcheck="true">#B集合里的元素在A集合中存在，返回true。</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>A <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">"py"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>B <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"p","y",123&amp;#125;</span><span class="token operator">>></span><span class="token operator">></span>A <span class="token operator">></span>B<span class="token comment" spellcheck="true">#包含关系</span><span class="token boolean">True</span><span class="token comment" spellcheck="true">#这个该怎么解释呢？</span></code></pre><p>对普通版进行演示了，Pro版遭到了我的嫌弃。</p><h2 id="3，集合的处理方法"><a href="#3，集合的处理方法" class="headerlink" title="3，集合的处理方法"></a>3，集合的处理方法</h2><p>想起方法，有个很知识点<br>方法的表达形式：<code>&lt;a&gt;.&lt;b&gt;() </code>形式<br><img src="https://img-blog.csdnimg.cn/20200708135318160.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MzQ4ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200708141025579.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MzQ4ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>看起来很多。。。<br>我也演示一下</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>A <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"a","b","123","北京","（python）"&amp;#125;#我用&amp;#123;&amp;#125;创集合</span><span class="token operator">>></span><span class="token operator">></span>A<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">"中国"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>A<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'北京', '中国', '123', 'a', '（python）', 'b'&amp;#125;</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>A <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"a","b","123","北京","（python）"&amp;#125;</span><span class="token operator">>></span><span class="token operator">></span>A<span class="token punctuation">.</span>discard<span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>A<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'a', '（python）', '123', '北京'&amp;#125;</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>A <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"a","b","123","北京","（python）"&amp;#125;</span><span class="token operator">>></span><span class="token operator">></span>A<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>ATraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"E:\新建文件夹\Python程序设计\练习.py"</span><span class="token punctuation">,</span> line <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token keyword">print</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>A<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>KeyError<span class="token punctuation">:</span> <span class="token string">'c'</span><span class="token comment" spellcheck="true">#由于集合中没有c元素，报错 </span><span class="token operator">>></span><span class="token operator">></span>A<span class="token punctuation">.</span>discard<span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>A<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'北京', '（python）', 'b', '123', 'a'&amp;#125;#由于集合中没有c元素，返回原集合</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>A <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"a","b","123","北京","（python）"&amp;#125;</span><span class="token operator">>></span><span class="token operator">></span>A<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>Aset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#清空</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>A <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"a","b","123","北京","（python）"&amp;#125;</span><span class="token operator">>></span><span class="token operator">></span>A<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>北京</code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>A <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"a","b","123","北京","（python）"&amp;#125;</span><span class="token operator">>></span><span class="token operator">></span>A<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'b', '123', '（python）', 'a', '北京'&amp;#125;</span><span class="token comment" spellcheck="true">#就是复制一遍</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>A <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"a","b","123","北京","（python）"&amp;#125;</span><span class="token operator">>></span><span class="token operator">></span>len<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token number">5</span></code></pre><p>emmm,这个len()函数在字符串中也用的到吧。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>A <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"a","b","123","北京","（python）"&amp;#125;</span><span class="token operator">>></span><span class="token operator">></span><span class="token string">"a"</span> <span class="token keyword">in</span> A<span class="token boolean">True</span><span class="token comment" spellcheck="true">##在里面</span><span class="token operator">>></span><span class="token operator">></span><span class="token string">"A"</span> <span class="token keyword">in</span> A<span class="token boolean">False</span><span class="token comment" spellcheck="true">#不在里面</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>A <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"a","b","123","北京","（python）"&amp;#125;</span><span class="token operator">>></span><span class="token operator">></span><span class="token string">"A"</span> <span class="token operator">not</span> <span class="token keyword">in</span> A<span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span><span class="token string">"a"</span> <span class="token operator">not</span> <span class="token keyword">in</span> A<span class="token boolean">False</span></code></pre><p>可以理解为<code>in</code>和<code>not in</code>互补</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>set<span class="token punctuation">(</span><span class="token string">"人生苦短，我学Python"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'，', '人', '短', '我', 'o', 'n', 't', 'y', '学', '苦', 'h', '生', 'P'&amp;#125;</span></code></pre><h2 id="4，集合类型应用场景"><a href="#4，集合类型应用场景" class="headerlink" title="4，集合类型应用场景"></a>4，集合类型应用场景</h2><p>数据去重。集合类型所有元素无重复。</p><h1 id="三，序列类型及操作"><a href="#三，序列类型及操作" class="headerlink" title="三，序列类型及操作"></a>三，序列类型及操作</h1><h2 id="1，序列类型定义"><a href="#1，序列类型定义" class="headerlink" title="1，序列类型定义"></a>1，序列类型定义</h2><p>序列是一种具有先后关系的一组元素<br>序列是一维元素向量，元素类型可以不同。<br>类似数学元素类型：A1，A2，A3·······An<br>元素之间有序号引导，通过下标访问序列的特定元素。</p><p>序列是一个基本类型<br>序列包括：字符串类型、元祖类型和列表类型</p><p><img src="https://img-blog.csdnimg.cn/20200715183525848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MzQ4ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>和集合类型不同，序列类型是有顺序的<br>那张图像像像极了字符串的索引序列</p><h2 id="2，序列处理函数及方法"><a href="#2，序列处理函数及方法" class="headerlink" title="2，序列处理函数及方法"></a>2，序列处理函数及方法</h2><p>先看图<br><img src="https://img-blog.csdnimg.cn/20200717162136570.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MzQ4ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在作事</p><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"pthon"</span><span class="token punctuation">,</span><span class="token string">"中国"</span><span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#创建一个元组</span>t <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"北京"</span><span class="token punctuation">,</span><span class="token string">"abc"</span><span class="token punctuation">,</span><span class="token string">"python"</span><span class="token punctuation">]</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"中国"</span> <span class="token keyword">in</span> s<span class="token punctuation">)</span><span class="token boolean">True</span><span class="token comment" spellcheck="true">#"中国"在元组s中</span><span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"北京"</span> <span class="token keyword">in</span> s<span class="token punctuation">)</span><span class="token boolean">False</span><span class="token comment" spellcheck="true">#"北京"不在元素s中</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"中国"</span> <span class="token operator">not</span> <span class="token keyword">in</span> s<span class="token punctuation">)</span><span class="token boolean">False</span><span class="token comment" spellcheck="true">#"中国"在元组s中</span><span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"北京"</span> <span class="token operator">not</span> <span class="token keyword">in</span> s<span class="token punctuation">)</span><span class="token boolean">True</span><span class="token comment" spellcheck="true">#"北京"不在元素s中</span></code></pre><p>好像<code>in</code>和<code>not in</code>都是成对出现！</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>s <span class="token operator">+</span> t<span class="token operator">></span><span class="token punctuation">[</span><span class="token string">'pthon'</span><span class="token punctuation">,</span> <span class="token string">'中国'</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">,</span> <span class="token string">'北京'</span><span class="token punctuation">,</span> <span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#连接</span></code></pre><p>元组可以有相同元素</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>s<span class="token operator">*</span>n<span class="token punctuation">[</span><span class="token string">'pthon'</span><span class="token punctuation">,</span> <span class="token string">'中国'</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">,</span> <span class="token string">'pthon'</span><span class="token punctuation">,</span> <span class="token string">'中国'</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">,</span> <span class="token string">'pthon'</span><span class="token punctuation">,</span> <span class="token string">'中国'</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#重要的事情说三遍</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token number">123</span><span class="token comment" spellcheck="true">#"123"事第二个元素</span><span class="token operator">>></span><span class="token operator">></span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'123'</span><span class="token punctuation">,</span> <span class="token string">'中国'</span><span class="token punctuation">,</span> <span class="token string">'pthon'</span><span class="token punctuation">]</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200718175755867.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MzQ4ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"pthon"</span><span class="token punctuation">,</span><span class="token string">"中国"</span><span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#创建一个元组</span>t <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"北京"</span><span class="token punctuation">,</span><span class="token string">"abc"</span><span class="token punctuation">,</span><span class="token string">"python"</span><span class="token punctuation">]</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token number">3</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>max<span class="token punctuation">(</span>s<span class="token punctuation">)</span>中国<span class="token operator">>></span><span class="token operator">></span>min<span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token number">123</span></code></pre><p>有哪位大佬给我解释一下这是什么意思，文字、英文、数字为什么可以在一起比较</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>s<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">"中国"</span><span class="token punctuation">)</span><span class="token number">1</span></code></pre><h2 id="3，元祖类型及操作"><a href="#3，元祖类型及操作" class="headerlink" title="3，元祖类型及操作"></a>3，元祖类型及操作</h2><h4 id="（1）元组的定义"><a href="#（1）元组的定义" class="headerlink" title="（1）元组的定义"></a>（1）元组的定义</h4><p>元组是序列类型的一种扩展<br>元组是一种序列类型，一旦创建就不能修改<br>用小括号()或tuple()创建，元组间用逗号,分隔<br>可以使用或不适用小括号</p><h4 id="（2）元组类型的操作"><a href="#（2）元组类型的操作" class="headerlink" title="（2）元组类型的操作"></a>（2）元组类型的操作</h4><p>元组类型继承了序列类型的全部通用操作<br>因为创建后不能修给，所以没有特殊操作</p><h2 id="4，列表类型及操作"><a href="#4，列表类型及操作" class="headerlink" title="4，列表类型及操作"></a>4，列表类型及操作</h2><p>列表类型是序列类型的的一种扩展，十分常用<br>列表是一种序列类型，所以创建后可以随意被修改<br>使用[]或list()创建，元素之间用逗号.隔开<br>列表中各元素可以不同，无限长度。<br><img src="https://img-blog.csdnimg.cn/20200719160107107.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MzQ4ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200719161556967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MzQ4ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">[</span><span class="token string">'中国'</span><span class="token punctuation">,</span> <span class="token string">'dfg'</span><span class="token punctuation">,</span> <span class="token string">'北京'</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'(python123)'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#创建列表</span><span class="token operator">>></span><span class="token operator">></span>It <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"qwe"</span><span class="token punctuation">,</span><span class="token string">"456"</span><span class="token punctuation">,</span><span class="token string">"Hello"</span><span class="token punctuation">,</span><span class="token string">"Woeld"</span><span class="token punctuation">]</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>Is<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"dfg"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'中国'</span><span class="token punctuation">,</span> <span class="token string">'dfg'</span><span class="token punctuation">,</span> <span class="token string">'北京'</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'(python123)'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#序列号为1的元素被替换，“abc”秒变“dfg”</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>Is<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> It<span class="token punctuation">[</span><span class="token string">'中国'</span><span class="token punctuation">,</span> <span class="token string">'qwe'</span><span class="token punctuation">,</span> <span class="token string">'456'</span><span class="token punctuation">,</span> <span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token string">'Woeld'</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'(python123)'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#替换序列号为1到3的内容，</span><span class="token operator">>></span><span class="token operator">></span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">del</span> Is<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'中国'</span><span class="token punctuation">,</span> <span class="token string">'北京'</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'(python123)'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">del</span> Is<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token string">'中国'</span><span class="token punctuation">,</span> <span class="token string">'(python123)'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#代表步长</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>Is <span class="token operator">+=</span> It <span class="token punctuation">[</span><span class="token string">'中国'</span><span class="token punctuation">,</span> <span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token string">'北京'</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'(python123)'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'qwe'</span><span class="token punctuation">,</span> <span class="token string">'456'</span><span class="token punctuation">,</span> <span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token string">'Woeld'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#合并</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>Is <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">[</span><span class="token string">'中国'</span><span class="token punctuation">,</span> <span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token string">'北京'</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'(python123)'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'中国'</span><span class="token punctuation">,</span> <span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token string">'北京'</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'(python123)'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'中国'</span><span class="token punctuation">,</span> <span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token string">'北京'</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'(python123)'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>Is<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"dfg"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'中国'</span><span class="token punctuation">,</span> <span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token string">'北京'</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'(python123)'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'dfg'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#增加“dfg”</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>Is<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#返回一个空列表</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>Is<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"中国"</span><span class="token punctuation">,</span><span class="token string">"abc"</span><span class="token punctuation">,</span><span class="token string">"北京"</span><span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"(python123)"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token string">"e"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#copy一下</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>Is<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'中国'</span><span class="token punctuation">,</span> <span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">,</span> <span class="token string">'北京'</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'(python123)'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span>s<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#删除第一个“a”</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>Is<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'中国'</span><span class="token punctuation">,</span> <span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'(python123)'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>Is<span class="token punctuation">.</span>reverse <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'(python123)'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">,</span> <span class="token string">'北京'</span><span class="token punctuation">,</span> <span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token string">'中国'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#反过来了</span></code></pre><h2 id="5，序列类型应用场景"><a href="#5，序列类型应用场景" class="headerlink" title="5，序列类型应用场景"></a>5，序列类型应用场景</h2><p>数据表示：元组和列<br>元组用于元素不改变的场景，更多用于固定搭配场景。<br>列表更加灵活，他是最常用的数据类型。<br>最主要的作用，表示一组有序数据，进行操作他们。</p><h1 id="四，字典类型及操作"><a href="#四，字典类型及操作" class="headerlink" title="四，字典类型及操作"></a>四，字典类型及操作</h1><h2 id="1，字典类型定义"><a href="#1，字典类型定义" class="headerlink" title="1，字典类型定义"></a>1，字典类型定义</h2><p>理解“映射”<br>映射是一种键（索引）和值（数据）对应</p><p>键值对：键是数据索引的扩展<br>字典是键值对的集合，键值对之间没有顺序<br>有个大括号{}或dict()创建，键值对用冒号:表示</p><pre class=" language-python"><code class="language-python"><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&lt;键1>:&lt;值1>,&lt;键2>:&lt;值2>,&lt;键3>:&lt;值3>,...,&lt;键N>:&lt;值N>,&amp;#125;</span></code></pre><p>字典类型的用法<br>在字典变量中，通过键获得值</p><pre class=" language-python"><code class="language-python">d <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"姓名":"张三","性别":"男","住址":"北京"&amp;#125;</span></code></pre><p>[]用来向字典变量中索引或增加元素</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>d<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"姓名":"张三","性别":"男","住址":"北京"&amp;#125;</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>d<span class="token punctuation">[</span><span class="token string">"住址"</span><span class="token punctuation">]</span>北京</code></pre><h2 id="2，字典处理函数及方法"><a href="#2，字典处理函数及方法" class="headerlink" title="2，字典处理函数及方法"></a>2，字典处理函数及方法</h2><p>先放两张图、<br><img src="https://img-blog.csdnimg.cn/20200722165052994.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MzQ4ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200723170603632.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MzQ4ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>敲代码，熟能生巧<br>字典类型的用法<br>在字典变量中，通过键获得值</p><pre class=" language-python"><code class="language-python">d <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"姓名":"张三","性别":"男","住址":"北京"&amp;#125;</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">del</span> d<span class="token punctuation">[</span><span class="token string">"性别"</span><span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'姓名': '张三', '住址': '北京'&amp;#125;#删除性别</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span><span class="token string">"性别"</span> <span class="token keyword">in</span> d<span class="token boolean">True</span><span class="token comment" spellcheck="true">#“性别”在字典里</span><span class="token operator">>></span><span class="token operator">></span><span class="token string">"电话"</span> <span class="token keyword">in</span> d<span class="token boolean">False</span><span class="token comment" spellcheck="true">#“电话”不在字典里</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>d<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span>dict_keys<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'姓名'</span><span class="token punctuation">,</span> <span class="token string">'性别'</span><span class="token punctuation">,</span> <span class="token string">'住址'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#返回键信息</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>d<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span>dict_values<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token string">'北京'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span>dict_items<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'姓名'</span><span class="token punctuation">,</span> <span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'性别'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'住址'</span><span class="token punctuation">,</span> <span class="token string">'北京'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>d<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"住址"</span><span class="token punctuation">,</span><span class="token string">"12345"</span><span class="token punctuation">)</span>北京<span class="token operator">>></span><span class="token operator">></span>d<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"电话"</span><span class="token punctuation">,</span><span class="token string">"12345"</span><span class="token punctuation">)</span><span class="token number">12345</span><span class="token comment" spellcheck="true">#键值中没有电话</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>d<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">"住址"</span><span class="token punctuation">,</span><span class="token string">"12345"</span><span class="token punctuation">)</span>北京<span class="token operator">>></span><span class="token operator">></span>d<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">"电话"</span><span class="token punctuation">,</span><span class="token string">"12345"</span><span class="token punctuation">)</span><span class="token number">12345</span><span class="token comment" spellcheck="true">#键值中没有电话</span></code></pre><p>get是返回，pop是取出。。貌似没有区别</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>d<span class="token punctuation">.</span>popitem<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'住址'</span><span class="token punctuation">,</span> <span class="token string">'北京'</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>d<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>None</code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>len<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token number">3</span><span class="token comment" spellcheck="true">#以对的形式出现</span></code></pre><h2 id="3，字典类型场景应用"><a href="#3，字典类型场景应用" class="headerlink" title="3，字典类型场景应用"></a>3，字典类型场景应用</h2><p>映射无处不在，键值对无处不在<br>例如：统计数据出现的次数，数据是键，次数是值<br>最主要的作用，表达键值对数据，进而操作他们</p><h1 id="五，总结"><a href="#五，总结" class="headerlink" title="五，总结"></a>五，总结</h1><p>结束啦<br>我发现了个有趣现象。有的函数他们是通用的，比如<code>len()</code>，想起这个，字符串也可以用。还有<code>clear()</code>英语是清空的意思，所以。。。<br>数据无处不在，Python在数据处理方面有很大优势。。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python之函数和代码复用笔记</title>
      <link href="2021/05/11/python%E4%B9%8B%E5%87%BD%E6%95%B0%E5%92%8C%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>2021/05/11/python%E4%B9%8B%E5%87%BD%E6%95%B0%E5%92%8C%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><strong>python之函数和代码复用笔记</strong></p><span id="more"></span><p>这一章的内容有点多，我也尝试一下这个目录是怎么用的，，哈哈<br>@<a href="%E6%9C%AC%E7%AB%A0%E8%8A%82%E5%86%85%E5%AE%B9%E5%A6%82%E4%B8%8B">TOC</a></p><h1 id="一，前言"><a href="#一，前言" class="headerlink" title="一，前言"></a>一，前言</h1><p>看小说都会有一个前言，我也整一个。<br>这节内容很多，很多，很多····对我来说也有点难理解。两天看完这块内容，比较赶时间，看的迷迷糊糊。<br>看目录函数部分比代码部分多，但是我个人感觉函数部分相对容易一些。代码部分仿佛是听天书！</p><h1 id="二，函数的定义与使用"><a href="#二，函数的定义与使用" class="headerlink" title="二，函数的定义与使用"></a>二，函数的定义与使用</h1><h2 id="1，函数的理解与定义"><a href="#1，函数的理解与定义" class="headerlink" title="1，函数的理解与定义"></a>1，函数的理解与定义</h2><p>函数是一段代码的体现，<br>函数是一段具有特定功能、可重用的语句。<br>函数是一种功能的体现，一般函数表达特定功能。<br>两个作用：降低编程难度和代码复用</p><p>这段功能可以多次使用，可以多次使用你就不用重复打好几段代码是不是就容易了。</p><p>记得上次我画机械猫，我要经常抬起画笔，goto定位，放下画笔，做了一天，就是重复这个动作好几遍。现在再一次审视，是不是就可以节约一点时间，大部分时间。</p><h2 id="2，函数的使用及调用过程"><a href="#2，函数的使用及调用过程" class="headerlink" title="2，函数的使用及调用过程"></a>2，函数的使用及调用过程</h2><p>听起来高大上，应该怎么用呢？</p><h3 id="（1）函数的使用"><a href="#（1）函数的使用" class="headerlink" title="（1）函数的使用"></a>（1）函数的使用</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token operator">&lt;</span>函数名<span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&lt;</span>参数<span class="token punctuation">(</span><span class="token number">0</span>个或多个<span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>函数体<span class="token operator">></span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>返回值<span class="token operator">></span></code></pre><p>我们就一我是说的机械猫举个栗子</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> turtle<span class="token keyword">def</span> <span class="token function">cat</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>    turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span></code></pre><p>但是呢。。。发现了吗没有返回值return，大佬自然懂，小白接着看！<br>还记得这个公式吗：y = f(x)中学阶段学的<br>函数定义时，所指的参数是一种占位符。<br>函数定义后，如果不经过调用，不会被执行。<br>函数定义时，参数是输入，函数体是处理，结果是输出（IPO）</p><h3 id="（2）函数的调用过程"><a href="#（2）函数的调用过程" class="headerlink" title="（2）函数的调用过程"></a>（2）函数的调用过程</h3><p>还是那个机械猫</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> turtle<span class="token keyword">def</span> <span class="token function">cat</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>    turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>cat<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span></code></pre><p>函数的调用</p><pre class=" language-python"><code class="language-python">cat<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span></code></pre><p>调用时要给出实际参数<br>实际参数代替定义中的参数<br>调用后得到返回值<br><img src="https://img-blog.csdnimg.cn/2020060717152677.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MzQ4ODQw,size_16,color_FFFFFF,t_70" alt="参数传递"><br>做了个图<br>怎么看呢，听我分解。<br>cat(20, 100)作为实际参数，于是开始自动执行，程序会自动代替我们的参数(n, m)函数体开始解析代码，之后返回。</p><h2 id="3，函数的参数传递"><a href="#3，函数的参数传递" class="headerlink" title="3，函数的参数传递"></a>3，函数的参数传递</h2><p>函数可以有参数，也可以没有参数，但是括号必须保留</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token operator">&lt;</span>函数名<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>函数体<span class="token operator">></span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>返回值<span class="token operator">></span></code></pre><p>函数定义时，可以为某个参数定义一个值，构成可选参数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token operator">&lt;</span>函数名<span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&lt;</span>非可选参数<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>可选参数<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>函数体<span class="token operator">></span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>返回值<span class="token operator">></span></code></pre><p>机械猫又来了<br>还是那个机械猫</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> turtle<span class="token keyword">def</span> <span class="token function">cat</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#调用</span><span class="token operator">>></span><span class="token operator">></span>cat<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>cat<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#他俩的位置相同</span></code></pre><p>函数定义时可以设定可变参数的数量，就是不确定参数的数量</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token operator">&lt;</span>函数名<span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&lt;</span>非可选参数<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>函数体<span class="token operator">></span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>返回值<span class="token operator">></span></code></pre><p>这个就不可以把机械猫当例子了<br>定义一个求和函数<br><img src="https://img-blog.csdnimg.cn/202006081006286.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MzQ4ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>咦！这是为什么，我还是从前那个少年，技术没有发生一丝改变，我还是多设定参数吧。<br>函数调用时，可以参数可以按照位置或名称方式传递<br>还是机械猫</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#调用函数</span><span class="token operator">>></span><span class="token operator">></span>cat<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#以位置方式调用</span><span class="token operator">>></span><span class="token operator">></span>cat<span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> m<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#以方式调用</span></code></pre><h2 id="4，函数的返回值"><a href="#4，函数的返回值" class="headerlink" title="4，函数的返回值"></a>4，函数的返回值</h2><p>函数可以返回0个或多个结果，<br>return保留字来传递f返回值<br>函数可以有返回值、也可以没有；所以return保留字也是可有可无<br>return可以返回0个值，也可以返回多个值</p><h2 id="5，局部变量和全局变量"><a href="#5，局部变量和全局变量" class="headerlink" title="5，局部变量和全局变量"></a>5，局部变量和全局变量</h2><p>函数里的变量可不可以和全局中的变量一致，一致会怎么样，<br>先说一下两个名词局部变量、全局变量，<br>局部变量：函数内部的变量<br>全局变量：代码中的变量</p><p>局部变量是函数内部的占位符，与全局变量可以同名但是作用不用 。<br>运算结束后局部变量会被释放。<br>可以用global保留字在函数内部来使用全局变量<br><img src="https://img-blog.csdnimg.cn/20200608130503307.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MzQ4ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200608140958535.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MzQ4ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>奇怪，这又是怎么回事，总而言之global保留字介绍是没错，估计我还不会书写格式<br>使用规则<br>在基本数据类型中无论是否重名，局部变量和全局变量不同。<br>可以通过global保留字在函数内部声明全局变量<br>在基本组合类型中，如果局部变量未真实创建，则是全局变量<br><img src="https://img-blog.csdnimg.cn/20200608145258217.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MzQ4ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="6，lambda函数"><a href="#6，lambda函数" class="headerlink" title="6，lambda函数"></a>6，lambda函数</h2><p>lambda函数是一种匿名函数，也就是没有名字<br>用lambda保留字定义，返回值就是函数的名字<br>lambda用于定义简单、可以在意行表达的函数</p><pre class=" language-python"><code class="language-python"><span class="token operator">&lt;</span>函数名<span class="token operator">></span> <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token operator">&lt;</span>参数<span class="token operator">></span><span class="token punctuation">:</span><span class="token operator">&lt;</span>表达式<span class="token operator">></span></code></pre><p>就像</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>f <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">:</span>x<span class="token operator">*</span>y<span class="token operator">+</span>z<span class="token operator">>></span><span class="token operator">></span>a <span class="token operator">=</span> f<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token number">5</span></code></pre><p>是不是像if-else二分支语句的简约形式</p><h1 id="三，代码复用与函数递归"><a href="#三，代码复用与函数递归" class="headerlink" title="三，代码复用与函数递归"></a>三，代码复用与函数递归</h1><h2 id="1，函数复用与模块化设计"><a href="#1，函数复用与模块化设计" class="headerlink" title="1，函数复用与模块化设计"></a>1，函数复用与模块化设计</h2><h3 id="（1）代码复用"><a href="#（1）代码复用" class="headerlink" title="（1）代码复用"></a>（1）代码复用</h3><p>把代码当成一种资源进行抽象<br>代码资源化：程序代码是一种用来表示计算的“资源”<br>程序抽象化：使用函数等方法对代码赋予更高级别的定义<br>代码复用：同一份代码在需要时可以被重复使用</p><p>我就明白了第四句，一段一段的代码可以重复使用。<br>个人猜测第二句第三句的意思是说把代码当作资源，可以实现各种我想要的，比如我的机械猫绘制。想要实现这些，有资源是远远不够的，还要对代码上使用函数、方法。<code>pow()</code>函数、.<code>format()</code>方法 等等·，这样就可以实现。</p><p>函数和对象是代码复用的主要形式<br>函数：将代码名命，在代码层面建立了初步抽象。<br>对象：属性和方法，<code>&lt;a&gt;.&lt;b&gt;</code>和<code>&lt;a&gt;.&lt;b&gt;()</code>在函数之上再次组织 进行抽象</p><h3 id="（2）模块化设计"><a href="#（2）模块化设计" class="headerlink" title="（2）模块化设计"></a>（2）模块化设计</h3><p>分而治之<br>通过函数或对象封装将程序划分为模块及模块间的表达<br>具体包括：主程序、子程序和子程序间的关系<br>分而治之：一种分而治之、分层抽象、体系化的设计思想</p><p>紧耦合、松耦合<br>紧耦合：两个部分之间交流很多，无法独立存在。<br>松耦合：两个部分之间交流很少，可以独立存在<br>模块内部紧耦合、模块之间松耦合</p><p>怎么理解<br>还是以我的机械猫为例吧<br>一个好的程序一定有很多功能 ，程序也有艺术，写出一段漂亮的代码一定很有成就感。就这两点而言我就喜欢一个功能一段函数，或是一个空格，逻辑清晰。这里指的应该肯定是函数。一段函数与一段的函数是否强烈，我离不开你或者说你在不在无所谓。这时就出现了紧耦合、松耦合。随之他们的概念也就此<br>我就是慢慢这样理解的。我感觉我理解的至少有一半是对的。</p><h2 id="2，函数递归的理解"><a href="#2，函数递归的理解" class="headerlink" title="2，函数递归的理解"></a>2，函数递归的理解</h2><p>定义：函数定义中调用自身的方式<br>两个关键特征<br>链条：计算过程中存在递归链条<br>基例：存在一个或多个不需要再次递归的基例</p><p>类似数学的归纳法<br>证明当N取第一个值N1命题成立？<br>假设当Nr时命题成立，证明N=Nr+1命题也成立<br>递归是数学归纳法思维的体现</p><p>怎么说<br>数学归纳法对我有点陌生，不好理解<br>程序之间计算的过程，上一步与下一步、下一步与下下一步之间的互动，他们就构成了链条<br>基例，最基础的实例，就像当y=f(x)中x=0时y也=0<br>可能也不是</p><h2 id="3，函数递归的调用过程"><a href="#3，函数递归的调用过程" class="headerlink" title="3，函数递归的调用过程"></a>3，函数递归的调用过程</h2><h3 id="递归的实现"><a href="#递归的实现" class="headerlink" title="递归的实现"></a>递归的实现</h3><p>函数+分支语句<br>递归本事是一个函数，需要函数定义方式描述<br>函数内部采用分支语句对输入参数进行判断<br>链条和基例分别编写对应代码</p><h3 id="递归的调用过程"><a href="#递归的调用过程" class="headerlink" title="递归的调用过程"></a>递归的调用过程</h3><p>1，<img src="https://img-blog.csdnimg.cn/20200608175409268.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MzQ4ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>2，<br><img src="https://img-blog.csdnimg.cn/20200608185457298.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MzQ4ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这个流程怎么解释呢<br>看第一张图先调用函数fact    (5)就是n=5，之后开始执行，判断n是否为0，因为不是0则不会返回1,。而是开辟一段新的内存运行fact(n-1)=4,n=4的值，以此类推，直到n=0时，接下来看第二张图，n=0时返回1，在第五步的n=1，则1<em>1=1；在第四步，n=2，则1</em>2=2<br>以此类推，得出120</p><h2 id="4，函数递归实例解析"><a href="#4，函数递归实例解析" class="headerlink" title="4，函数递归实例解析"></a>4，函数递归实例解析</h2><p>我们一起聊一聊汉诺塔的问题</p><h3 id="（1）问题简述"><a href="#（1）问题简述" class="headerlink" title="（1）问题简述"></a>（1）问题简述</h3><p>就是说在你前面有三根柱子，在柱子以上由大到小排列的N个圆盘，问题来了，把柱子一上的圆盘移动到柱子三上需要多少步？当然，，有一个圆盘、两个圆盘、三个圆盘这种情况就比较好解决，动手能力比较强的小朋友也可解决，一下子给你一百个呢，慢慢弄，也行；但是用程序呢?<br><img src="https://img-blog.csdnimg.cn/20200609121053508.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MzQ4ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="（2）上代码之代码实现"><a href="#（2）上代码之代码实现" class="headerlink" title="（2）上代码之代码实现"></a>（2）上代码之代码实现</h3><pre class=" language-python"><code class="language-python">count <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true">#计算需要的步骤</span><span class="token keyword">def</span> <span class="token function">hanoi</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> src<span class="token punctuation">,</span> dst<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#此处参数分别是：圆盘数量；源柱子；目标柱子；辅助柱子</span>    <span class="token keyword">global</span> count    <span class="token keyword">if</span> `n <span class="token operator">==</span> <span class="token number">1</span>`<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&amp;#123;&amp;#125;:&amp;#123;&amp;#125;->&amp;#123;&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>src<span class="token punctuation">,</span>dst<span class="token punctuation">)</span><span class="token punctuation">)</span>        count <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        hanoi<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">,</span> src<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> dst<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&amp;#123;&amp;#125;:&amp;#123;&amp;#125;->&amp;#123;&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>n<span class="token punctuation">,</span>src<span class="token punctuation">,</span>dst<span class="token punctuation">)</span><span class="token punctuation">)</span>        count <span class="token operator">+=</span> <span class="token number">1</span>        hanoi<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">,</span> mid<span class="token punctuation">,</span> dst<span class="token punctuation">,</span> src<span class="token punctuation">)</span></code></pre><p>调用这段代码</p><pre class=" language-python"><code class="language-python">hanoi<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">"源柱子A"</span><span class="token punctuation">,</span><span class="token string">"目标柱子C"</span><span class="token punctuation">,</span><span class="token string">"辅助柱子B"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200609121244781.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MzQ4ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="（3）代码分析"><a href="#（3）代码分析" class="headerlink" title="（3）代码分析"></a>（3）代码分析</h3><p>首先这段代码符合函数递归，因为有函数还有分支语句、基例、链条。<br>由<code>if n == 1:</code>判断当源柱子只有1个柱子，直接移动到目标柱子。<code>count</code>步骤一步到位。<br>当不是一根柱子时，此时需要把n-1圆盘子移动到辅助柱子，思考一下，5个圆盘中有4个圆盘必须有个过渡，放到辅助柱子上，是不是？因此<code>hanoi()</code>函数参数位置发生了变化。计算出步骤<br>那好，辅助柱子上的圆盘是不是就不用管了，No！移动到目标柱子，因此<code>hanoi()</code>函数参数位置有一次发生变化。<br>就这样结束了。</p><h1 id="四，总结"><a href="#四，总结" class="headerlink" title="四，总结"></a>四，总结</h1><p>这部分内容虽然有点多，但是在告诉我们如何写成高质量的代码。使你的代码一目了然。但是写出高质量代码还是有很多知识在背后支撑，还是、紧耦合、松耦合····还是尤为重要。</p><p>但这里就结束了，这章知识用了四天时间。在前言中我提到了这部分的知识我不太理解 ，我也是反复看视频，在回来写得博客。比开始写有一次加深。在这篇博客中我加了许多个人观点，我自己理解的，如果您有更好的观点，欢迎评论。一群人的学习效率远远大于一个人的学习效率，我是这样觉得。</p><p>也不是想让更多人看见，我只是喜欢通过这种方法记笔记，加深印象。我自己是不喜欢写字的，字写得也很丑。当然如果帮到你了，我很荣幸。</p><p>哈哈哈嗝</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python之程序的控制结构</title>
      <link href="2021/05/11/python%E4%B9%8B%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/"/>
      <url>2021/05/11/python%E4%B9%8B%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p><strong>python之程序的控制结构</strong></p><span id="more"></span><p>本文将会从两个大方向出发</p><ul><li>程序的分支结构</li><li>程序的循环结构</li></ul><p> 第一部分<br>程序的分支结构<br>1，单分支结构</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> <span class="token operator">&lt;</span>条件<span class="token operator">></span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句块<span class="token operator">></span></code></pre><p>如果添加成立，则执行语句块，否则不执行语句块。<br><img src="https://img-blog.csdnimg.cn/20200526185406592.png" alt="单分支流程图"><br>很简单！<br>2，二分支结构</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> <span class="token operator">&lt;</span>条件<span class="token operator">></span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句块<span class="token number">1</span><span class="token operator">></span><span class="token keyword">else</span>：    <span class="token operator">&lt;</span>语句块<span class="token number">2</span><span class="token operator">></span></code></pre><p>如果条件为真，执行语句块1；为假，执行语句块2。<br><img src="https://img-blog.csdnimg.cn/20200527191236601.png" alt="在这里插入图片描述"><br>二分支结构还有一种表现形式：</p><pre class=" language-python"><code class="language-python"><span class="token operator">&lt;</span>表达式<span class="token number">1</span><span class="token operator">></span> <span class="token keyword">if</span> <span class="token operator">&lt;</span>条件<span class="token operator">></span> <span class="token keyword">else</span> <span class="token operator">&lt;</span>表达式<span class="token number">2</span><span class="token operator">></span></code></pre><p>3，多分支结构<br>当然了，一个程序中不可能只有两个条件，所以。。。。。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> <span class="token operator">&lt;</span>条件<span class="token number">1</span><span class="token operator">></span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句块<span class="token number">1</span><span class="token operator">></span><span class="token keyword">elif</span><span class="token operator">&lt;</span>条件<span class="token number">2</span><span class="token operator">></span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句块<span class="token number">2</span><span class="token operator">></span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">else</span>：    <span class="token operator">&lt;</span>语句块N<span class="token operator">></span></code></pre><p>emmm，该怎么说呢？看见了省略号就是有很多条件，不妨看下流程图<br><img src="https://img-blog.csdnimg.cn/20200527195543572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MzQ4ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>4，条件判断及组合<br><img src="https://img-blog.csdnimg.cn/20200527202146808.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MzQ4ODQw,size_16,color_FFFFFF,t_70" alt="---"><img src="https://img-blog.csdnimg.cn/20200527203301204.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MzQ4ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>看见红字了吗？怎么解释，不有时候也有点蒙。<br>and：我就得是两个条件必须满足，而or;：两个条件满足一个就好。<br>and：<br><img src="https://img-blog.csdnimg.cn/20200527205105190.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020052720465227.png" alt="9"><br>or：两个条件满足一个。<br>学编程，实验出真理，<br>5，异常处理</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#第一种使用方法</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句块<span class="token number">1</span><span class="token operator">></span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句块<span class="token number">2</span><span class="token operator">></span><span class="token comment" spellcheck="true">#第二种使用方法</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句块<span class="token number">1</span><span class="token operator">></span><span class="token keyword">except</span><span class="token operator">&lt;</span>异常类型<span class="token operator">></span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句块<span class="token number">2</span><span class="token operator">></span></code></pre><p>其实一开始我很懵，我认为可以自动解决bug，错了，有些bug还要自己动手，<br>这个个人感觉和二分支语句一样，语句块1输入bug，语句块2输入解决方式</p><p>接下来进入第二部分<br>一个闪现，欢迎来到第二部分，知识还有5秒到达眼前<br>1，遍历循环<br>许许多多的东西多可以背循环，因此这一个知识点包含了很多知识，但是掌握一个人，其他的迎刃而解，<br>（1）遍历某个结构形成的循环`</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> <span class="token operator">&lt;</span>循环遍量<span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>遍历结构<span class="token operator">></span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句块<span class="token operator">></span></code></pre><p>怎么解释呢，，，遍历结构可以说元祖、字典·····从遍历结构中提取元素，放进遍量，语句块执行 </p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token string">"e"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我是"</span><span class="token operator">+</span>i<span class="token punctuation">)</span>我是a我是b我是c我是d我是e</code></pre><p>（2）计数循环</p><pre class=" language-python"><code class="language-python">foe i <span class="token keyword">in</span> range<span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句块<span class="token operator">></span></code></pre><p>range()函数产生数字序列，产生循环</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>hello <span class="token number">0</span>hello <span class="token number">1</span>hello <span class="token number">2</span>hello <span class="token number">3</span>hello <span class="token number">4</span></code></pre><p>从0开始，5次循环<br>还有！！！<br>计数循环（特定次）</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>N<span class="token punctuation">,</span>M<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句块<span class="token operator">></span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>N<span class="token punctuation">,</span>M<span class="token punctuation">,</span>K<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句块<span class="token operator">></span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>hello <span class="token number">1</span>hello <span class="token number">2</span>hello <span class="token number">3</span>hello <span class="token number">4</span><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>hello <span class="token number">1</span>hello <span class="token number">3</span> </code></pre><p>emmm，其实这类就是个区间，和字符串索引一样。<br>（3）字符串循环</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> c <span class="token keyword">in</span> s<span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句块<span class="token operator">></span></code></pre><p>s是字符串，循环</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token string">"人生苦短，我学python"</span><span class="token punctuation">:</span>       <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> 人生苦短，我学python</code></pre><p>（4）列表循环</p><pre class=" language-python"><code class="language-python">foe list <span class="token keyword">in</span> Is<span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句块<span class="token operator">></span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">for</span> list <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token string">"py"</span><span class="token punctuation">,</span><span class="token number">456</span><span class="token punctuation">]</span><span class="token punctuation">:</span>       <span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token number">123</span>py<span class="token number">456</span> </code></pre><p>（5）文件循环</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> line <span class="token keyword">in</span> fi<span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句块<span class="token operator">></span></code></pre><p>文件里面的内容逐一打出</p><p>遍历循环告一段落了，聊了这么说，都一样，<br>2，无限循环<br>直接说代码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">while</span> <span class="token operator">&lt;</span>条件<span class="token operator">></span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句块<span class="token operator">></span></code></pre><p>条件为真，循环一直执行，Ctrl+C强制结束循环，</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>a <span class="token operator">==</span> <span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">while</span> a <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> a <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token number">2</span><span class="token number">1</span><span class="token number">0</span><span class="token operator">>></span><span class="token operator">></span>a <span class="token operator">==</span> <span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">while</span> a <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token number">4</span><span class="token number">5</span>```Ctrl<span class="token operator">+</span>C 退出执行</code></pre><p>就是这点事<br>3，循环控制保留字<br>介绍两位新朋友：break和continue<br>定义是这么描述的<br>break：跳出并结束当前整个循环，并 执行循环后的语句。<br>continue：结束当次循环，继续执行后续次数循环。<br>可以搭配for和whlie使用<br>说句心里话，我不喜欢阅读概念，因为，，，我看不懂，上代码、</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">3</span><span class="token keyword">while</span> a <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></code></pre><p>还记得这段代码吗？这是个死循环，可以一直执行。稍作修改</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#break</span><span class="token operator">>></span><span class="token operator">></span>a <span class="token operator">=</span> <span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">while</span> a <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>       a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span>       <span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">:</span>           <span class="token keyword">break</span>       <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token number">4</span><span class="token number">5</span><span class="token number">6</span><span class="token number">7</span><span class="token number">8</span><span class="token number">9</span><span class="token comment" spellcheck="true">#continue</span><span class="token operator">>></span><span class="token operator">></span>a <span class="token operator">=</span> <span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">while</span> a <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>       a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span>       <span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">:</span>           <span class="token keyword">continue</span>       <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token number">5</span><span class="token number">6</span><span class="token number">7</span><span class="token number">8</span><span class="token number">9</span><span class="token number">11</span><span class="token number">12</span><span class="token number">13</span>```Ctrl<span class="token operator">+</span>C</code></pre><p>10呢？虽然不喜欢看概念，但是理论知识不能忘！对比一下，<br>break结束循环，continue结束当次想循环，继续下一次。<br>如果有多个循环内容？break仅跳出当前最内层循环。但是我举不出栗子<br>4，循环的高级用法<br>最后一关<br>就是说循环与else保留字的搭配。当循环执行时没有遇到break是执行else语句</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#continue</span><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token string">"python"</span><span class="token punctuation">:</span>       <span class="token keyword">if</span> c <span class="token operator">==</span>  <span class="token string">"t"</span><span class="token punctuation">:</span>           <span class="token keyword">continue</span>       <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>   <span class="token keyword">else</span><span class="token punctuation">:</span>       <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正常退出"</span><span class="token punctuation">)</span>pyhon正常退出<span class="token comment" spellcheck="true">#break</span><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token string">"python"</span><span class="token punctuation">:</span>       <span class="token keyword">if</span> c <span class="token operator">==</span>  <span class="token string">"t"</span><span class="token punctuation">:</span>           <span class="token keyword">break</span>       <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>   <span class="token keyword">else</span><span class="token punctuation">:</span>       <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正常退出"</span><span class="token punctuation">)</span>py</code></pre><p>好了，就这样结束了，<br>感谢观看，我在自学python，正在为二级计算机复习python，不对的请指出，如果您也在自学。加油！</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python之turtle库的使用笔记</title>
      <link href="2021/05/11/python%E4%B9%8Bturtle%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>2021/05/11/python%E4%B9%8Bturtle%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><strong>python之turtle库的使用笔记</strong></p><span id="more"></span><ol><li><p>turtle库介绍<br>图形绘制函数库，标准库；turtle（海龟）。<br>问题1:什么是标准库？<br>答：标准库就是python内部库，不需要安装直接导入即可使用。<br>问题2：这个库有什么用？<br>答：这是最简单的图形绘制库，你可以绘制自己喜欢的卡通人物。当然你也可以绘制一朵玫瑰花，送回给你的女朋友，体验用python表白之美。</p></li><li><p>库导入</p></li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> turtle</code></pre><p>这是一句固定语句，适用于各种库导入</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> <span class="token operator">&lt;</span>库名<span class="token operator">></span></code></pre><ol start="3"><li>新知识<br>1，生成一个人窗体</li></ol><pre class=" language-python"><code class="language-python">turtle<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>width<span class="token punctuation">,</span>beight<span class="token punctuation">,</span>startx<span class="token punctuation">,</span>starty<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#生成一个窗体以widthw为宽，beight为长；（startx,starty）窗体起始位置。电脑屏幕左上角为(0,0)可以省略</span></code></pre><p>2，画笔控制</p><pre class=" language-python"><code class="language-python">turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#penup()画笔抬起</span>turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#penomn()放下画笔</span></code></pre><p>这两个函数要一起使用`</p><pre class=" language-python"><code class="language-python">turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#fd()前行。当输入值为负数时后退</span>turtle<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#画笔左转</span>turtle<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#画笔右转</span>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span>radius<span class="token punctuation">,</span>extent<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#根据半径radius绘制extent角度的弧形。</span>turtle<span class="token punctuation">,</span>pensize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#控制画笔大小</span>turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#设置画笔颜色</span><span class="token comment" spellcheck="true">#为画好的图形进行填充</span>turtle<span class="token punctuation">.</span>fillecolor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#设置填充色</span>turtle<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#开始填充</span>turtle<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#结束填充</span></code></pre><ol start="4"><li>学以致用</li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#机械猫</span><span class="token keyword">import</span> turtle <span class="token keyword">as</span> t<span class="token comment" spellcheck="true">#猫头</span>t<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token number">550</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"#00a0de"</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>fillcolor<span class="token punctuation">(</span><span class="token string">'#00a0de'</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">125</span><span class="token punctuation">,</span><span class="token number">280</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#猫脸</span>t<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">15</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>fillcolor<span class="token punctuation">(</span><span class="token string">'#ffffff'</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">250</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>pu<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">35</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>fillcolor<span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>pu<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>pu<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>pd<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">45</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#脸部胡须左</span>t<span class="token punctuation">.</span>pu<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>pd<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">205</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>pu<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>pd<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token number">340</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>pu<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>pd<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#胡须右</span>t<span class="token punctuation">.</span>pu<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>pd<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>pu<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>pd<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>pu<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>pd<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">170</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#眼睛</span>t<span class="token punctuation">.</span>pu<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">220</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>pd<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>fillcolor<span class="token punctuation">(</span><span class="token string">'#ffffff'</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>pu<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">220</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>pd<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>fillcolor<span class="token punctuation">(</span><span class="token string">'#ffffff'</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>pu<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">180</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>pd<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>pu<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">165</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>pd<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>fillcolor<span class="token punctuation">(</span><span class="token string">'#000000'</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>fillcolor<span class="token punctuation">(</span><span class="token string">'#ffffff'</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/2020050218565423.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MzQ4ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python之time库的使用笔记</title>
      <link href="2021/05/11/python%E4%B9%8Btime%E5%BA%93%E7%9A%84%E7%AC%94%E8%AE%B0/"/>
      <url>2021/05/11/python%E4%B9%8Btime%E5%BA%93%E7%9A%84%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><em><strong>*python之time库的使用笔记*</strong></em></p><span id="more"></span><ol><li>time库简介<br>Q1:什么是time库<br>这是一个标准库，用来处理时间。<br>调用方法<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> timetime<span class="token punctuation">.</span><span class="token operator">&lt;</span>b<span class="token operator">></span></code></pre>Q2：：它有什么用？<br>计算机的时间表达；<br>提供获取系统时间并格式化输出功能<br>提供系统级精确计时功能，用于程序性能分析。</li></ol><p>以上了解这么多，其他的咱也不知道，咋也不想学。</p><p> 2 新知识<br>这部分分为三类：时间获取、时间格式化、程序计时。</p><ul><li>第一部分<br>店小二上代码</li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#获取当前时间戳，浮点数类型，</span><span class="token number">1589618223.847726</span></code></pre><p>Q：这个怎么看？不像是个时间。<br>事实上他是表示从1970年1月1日0:00开始到当前 这一时刻为止的一个以妙为单位的数值。因为不好理解，所以。。。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#获取当前系统时间并以易读方式表示，返回字符串类型</span>Sat May <span class="token number">16</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">37</span><span class="token punctuation">:</span><span class="token number">03</span> <span class="token number">2020</span></code></pre><p>现在客观满意了吗？？？</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>gmtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#获取当前时间，表示为计算机可处理的时间格式        </span>time<span class="token punctuation">.</span>struct_time<span class="token punctuation">(</span>tm_year<span class="token operator">=</span><span class="token number">2020</span><span class="token punctuation">,</span> tm_mon<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> tm_mday<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span> tm_hour<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> tm_min<span class="token operator">=</span><span class="token number">37</span><span class="token punctuation">,</span> tm_sec<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> tm_wday<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> tm_yday<span class="token operator">=</span><span class="token number">137</span><span class="token punctuation">,</span> tm_isdst<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><p>还是看不懂？要求高</p><ul><li>第二部分<br>——时间格式化！<br>类似字符串格式化。需要模板。是个怎么回事呢?</li></ul><pre class=" language-python"><code class="language-python">strftime<span class="token punctuation">(</span>tep<span class="token punctuation">,</span>ts<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#tep是格式化模板字符串，用来定义输出结果。ts计算机内部时间类型变量。</span><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %a %H:%M:%S"</span><span class="token punctuation">,</span>time<span class="token punctuation">.</span>gmtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">16</span> Sat <span class="token number">08</span><span class="token punctuation">:</span><span class="token number">37</span><span class="token punctuation">:</span><span class="token number">03</span></code></pre><p>是不是很直观。<br><img src="https://img-blog.csdnimg.cn/20200516173936567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MzQ4ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>嗯!就是这样。</p><pre class=" language-python"><code class="language-python">strptimr<span class="token punctuation">(</span>str<span class="token punctuation">.</span>tpl<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#st是字符串类型的时间值，teo：是格式化模板字符串，用来定义输出结果。</span><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span><span class="token string">"2018-01-26 12:55:20"</span><span class="token punctuation">,</span><span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>struct_time<span class="token punctuation">(</span>tm_year<span class="token operator">=</span><span class="token number">2018</span><span class="token punctuation">,</span> tm_mon<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> tm_mday<span class="token operator">=</span><span class="token number">26</span><span class="token punctuation">,</span> tm_hour<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span> tm_min<span class="token operator">=</span><span class="token number">55</span><span class="token punctuation">,</span> tm_sec<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> tm_wday<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> tm_yday<span class="token operator">=</span><span class="token number">26</span><span class="token punctuation">,</span> tm_isdst<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><p>这个函数看明白了吗？可以这么说“time.strftime与time.strptime互补”</p><ul><li>第三部分——程序计时<br>测试程序起止动作所经历时间的过程。</li></ul><pre class=" language-python"><code class="language-python">time<span class="token punctuation">.</span>perf_counter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#返回一个CPU级别的精确时间计数值，单位为妙。调用一次没什么意义，连续调用</span><span class="token operator">>></span><span class="token operator">></span>start <span class="token operator">=</span> time<span class="token punctuation">.</span>perf_counter <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">print</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token number">0.4573813</span><span class="token operator">>></span><span class="token operator">></span>end <span class="token operator">=</span> time<span class="token punctuation">.</span>perf_counter <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">print</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token number">0.4573824</span><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">print</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token number">1.1000000000316312e-06</span></code></pre><p>给我的感觉不得看，我是看不懂。</p><pre class=" language-python"><code class="language-python">sleep<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#s拟休眠的时间，可以是紫虎成</span><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">def</span> wait<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>wait<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"wrld"</span><span class="token punctuation">)</span>hello<span class="token comment" spellcheck="true">#5妙后出现</span>wrld</code></pre><p>感谢观看，我在自学python，正在为二级计算机复习python，不对的请指出，如果您也在自学。加油！</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python之random学习笔记</title>
      <link href="2021/05/11/python%E4%B9%8Brandom%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>2021/05/11/python%E4%B9%8Brandom%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><strong>python之random学习笔记</strong></p><span id="more"></span><p>1，random的基本介绍<br>random库是使用随机数的python标准库<br>伪随机数：采用梅森旋转算法生成的（伪）随机数<br>random库主要用于生成随机数<br>使用random库</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> rendom</code></pre><p>总结：就是说随机生成一个数字，具体怎么使用，请看接下来分解</p><ol><li>基本随机数函数<br>1，seed(a=None)<br>初始化给定的随机数种子，默认为系统时间</li></ol><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#产生种子10对应的序列</span></code></pre><p>2，random()<br>生成一个[0.0,1.0)之间的随机小数</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">0.0038642328632264578</span></code></pre><p>seed()是怎么使用，在idle里返回None？感谢大佬解答<br>这俩个函数生成的随机数我一般用不到，<br> 3. 扩展随机数函数<br> （1）randint(a,b)<br> 生成一个[a,b]之间的整数</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token number">38</span></code></pre><p>（2）randrange(m,n[k])<br>生成一个[m,n)之间k为步长的随机整数</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token number">70</span></code></pre><p>（3）getrandbits(k)<br>生成一个k比特长的随机整数</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token number">57347</span></code></pre><p>（4）uniform(a,b)<br>生成一个[a,b]之间的随机小数</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token number">74.7683361268672</span></code></pre><p>（5）choice(sep)<br>从序列sep中随机选择一个元素</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">0</span></code></pre><p>（6）shuffle(sep)<br>将序列sep中的元素随机排列，返回打乱后的顺序</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>   random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>s<span class="token punctuation">)</span>   </code></pre><p>该说的说完了，但我还想说：随机在编程中用的应该不怎么多，我学完之后做了个小游戏，人机猜拳，就是用的随机数，老师教我圆周率计算也用到了，撒点，求面积。<br>好了，就这样结束了，感谢观看，我在自学python，正在为二级计算机复习python，不对的请指出，如果您也在自学。加油！</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python之pyinstall库的使用笔记</title>
      <link href="2021/05/11/python%E4%B9%8Bpyinstaller%E5%BA%93%E5%AD%A6%E4%B9%A0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>2021/05/11/python%E4%B9%8Bpyinstaller%E5%BA%93%E5%AD%A6%E4%B9%A0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><strong>python之用pyinstall库的使用笔记</strong></p><span id="more"></span><p>@<a href="%E7%AC%94%E8%AE%B0%E7%9B%AE%E5%BD%95">TOC</a></p><h1 id="一，前言"><a href="#一，前言" class="headerlink" title="一，前言"></a>一，前言</h1><p>哈喽，大家好！相信大家写了很多有意思的程序了吧，我的《python程序设计》’文件夹有很多有意思的程序。如果想分享给我们的伙伴，是不是对方电脑也必须装有idle环境。小伙伴同意了那就好说，如果不同意呢？“我喜欢Java，我不要python”，那就。。。当然大佬看到表情应该已经明白了我要作甚，小白。。。<br>开始记笔记</p><h1 id="二，pyinstaller库基本介绍"><a href="#二，pyinstaller库基本介绍" class="headerlink" title="二，pyinstaller库基本介绍"></a>二，pyinstaller库基本介绍</h1><h2 id="1，pyinstaller库概述"><a href="#1，pyinstaller库概述" class="headerlink" title="1，pyinstaller库概述"></a>1，pyinstaller库概述</h2><p>将.py源代码转换成无需要源代码的可执行文件<br>pyinstaller是第三方库</p><p>官方网站：<a href="http://www.pyinstaller.org/">http://www.pyinstaller.org</a><br>第三方库：使用前需要额外安装<br>第三方库安装需要pip工具</p><h2 id="2，pyinstaller库的安装"><a href="#2，pyinstaller库的安装" class="headerlink" title="2，pyinstaller库的安装"></a>2，pyinstaller库的安装</h2><pre><code>pip install pyinstaller</code></pre><p>这是个命令，不是代码，需要在cmd中运行。cmd、cmd、cmd。</p><h1 id="三，pyinstaller库使用说明"><a href="#三，pyinstaller库使用说明" class="headerlink" title="三，pyinstaller库使用说明"></a>三，pyinstaller库使用说明</h1><h2 id="1，简单的使用"><a href="#1，简单的使用" class="headerlink" title="1，简单的使用"></a>1，简单的使用</h2><p>在cmd命令行中</p><pre><code>pyinstaller -f &lt;文件名&gt;</code></pre><h2 id="2，pyinstaller库常用参数"><a href="#2，pyinstaller库常用参数" class="headerlink" title="2，pyinstaller库常用参数"></a>2，pyinstaller库常用参数</h2><p><img src="https://img-blog.csdnimg.cn/2020061613514012.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MzQ4ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3，简单使用"><a href="#3，简单使用" class="headerlink" title="3，简单使用"></a>3，简单使用</h2><p>看明白了，但是不会用，那就挺尴尬的<br>我尝试过许多，也就成功了几。<br><img src="https://img-blog.csdnimg.cn/20200616140427400.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MzQ4ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>就让我展示一下我的爱国心<br>需要的准备ico图标文件，py文件</p><p><img src="https://img-blog.csdnimg.cn/20200616144059299.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MzQ4ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">输入两个文件夹所在位置<br>之后就会有。。。<br><img src="https://img-blog.csdnimg.cn/20200616145815957.png" alt="在这里插入图片描述"><br>文件存放在dist文件夹中<br><img src="https://img-blog.csdnimg.cn/20200616144155272.png" alt="在这里插入图片描述"></p><h1 id="四，总结"><a href="#四，总结" class="headerlink" title="四，总结"></a>四，总结</h1><p>这个模块学起来还是挺简单的，但是做起，我做这个演示的时候也失败了很多次，给大家挺个建议直接放到他的目录下试试<br><img src="https://img-blog.csdnimg.cn/20200616145235677.png" alt="在这里插入图片描述"><br>get到了就可以在给没有安装python环境电脑上运行python程序，还可以在小姐姐面前秀一秀，，兴许会得到她们的芳心。嘻嘻</p><p>也不是想让更多人看见，我只是喜欢通过这种方法记笔记，加深印象。我自己是不喜欢写字的，字写得也很丑。当然如果帮到你了，我很荣幸。</p><p>哈哈哈嗝</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础语法之字符串类型及操作</title>
      <link href="2021/05/11/Python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B%E5%8F%8A%E6%93%8D%E4%BD%9C/"/>
      <url>2021/05/11/Python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B%E5%8F%8A%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p><strong>Python基础语法之字符串类型及操作</strong></p><span id="more"></span><p>1,正向递增、反向递减符号。<br>如果字符串字长为L，正向递增符号就是从字符串最左侧的最小字符串为0开始。最右侧的字符串为L-1。反向递减符号就是从字符串最右侧开始，第一个字符串序列为-1直到最后一个字符串为-L<br><img src="https://img-blog.csdnimg.cn/20200224175646126.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MzQ4ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2,字符串区间访问<br>①区间访问采用[N:jM]格式，表示字符串从N到N（不包含M）的字符串。<br>②N和N称为索引序列<br>③可混合正向递增、反向递减符号使用。<br>④如果表示N或M一端缺失，则表示字符串的开始或结束索引值设为默认值<br>⑤举例</p><pre class=" language-python"><code class="language-python"><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>a<span class="token operator">=</span><span class="token string">"请输入带有单位的温度值:"</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token string">":"</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">3</span>：<span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token string">"带走单位"</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span>：<span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#为什么不可以是[-7:-3]</span><span class="token string">"单位的温"</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token string">"输入带有单位温度的值"</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token string">"带"</span><span class="token comment" spellcheck="true">#没有冒号输出也不一样，</span></code></pre><p>3,字符串操作符<br><img src="https://img-blog.csdnimg.cn/20200226182943591.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MzQ4ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>3,函数</p><pre class=" language-python"><code class="language-python">a<span class="token operator">=</span><span class="token string">"请输入带有单位的温度值:"</span>len<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#返回字符串额长度</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">12</span>str<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#返回x的字符串形式</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>请输入带有单位的温度值<span class="token punctuation">:</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">"请输入带有单位的温度值:"</span>hex<span class="token punctuation">(</span>x<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#返回整数x对应的十六进制的小写形式字符串</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token keyword">print</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span><span class="token number">857</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">"0x395"</span>oct<span class="token punctuation">(</span>x<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#返回整数x对应的八进制的小写形式字符串</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token keyword">print</span><span class="token punctuation">(</span>oct<span class="token punctuation">(</span><span class="token number">857</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">"0o1531"</span>chr<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#返回Unicode编码对应的字符串</span>ord<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#返回字符串表示的Unicode编码</span></code></pre><p>4,方法</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#采用&lt;a>.&lt;b>()形式</span>a<span class="token operator">=</span><span class="token string">"PyThOn123"</span>str<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#全部字符串小写，返回副本</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">"python123"</span>str<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#全部字符串大写，返回副本</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>PYTHON123str<span class="token punctuation">.</span>split<span class="token punctuation">(</span>sep<span class="token operator">=</span>None<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#返回-个列表，由str根据sep被分隔的部分组成</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token keyword">print</span><span class="token string">"A,B,C"</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">"A"</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">,</span><span class="token string">"C"</span>str<span class="token punctuation">.</span>count<span class="token punctuation">(</span>sub<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#返回子串sub在str出现的次数</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>s<span class="token operator">=</span><span class="token string">"an apple a day"</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token number">4</span>str<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>old<span class="token punctuation">,</span>new<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#返回str副本，所有old子串被替换为new</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"python"</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"n"</span><span class="token punctuation">,</span><span class="token string">"n123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pyhon123str<span class="token punctuation">.</span>cener<span class="token punctuation">(</span>width<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">.</span>fillchar<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#返回长度为width的字符串，其中，str处于字符串在中心位置，两侧新增字符用fillchar填充。</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"python"</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>python<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>str<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">[</span>chars<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#在其左侧、右侧去掉chars中列出的字符。</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"python"</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ythonstr<span class="token punctuation">.</span>join<span class="token punctuation">(</span>iterable<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#返回一个新字符串，由组合数据类型iterable变量的每一个元祖，元祖见有str字符。</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>str <span class="token operator">=</span> <span class="token string">"-"</span>   seq <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 字符串序列</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>join<span class="token punctuation">(</span> seq <span class="token punctuation">)</span><span class="token punctuation">)</span>a<span class="token operator">-</span>b<span class="token operator">-</span>c</code></pre><p>5，字符串格式化<br><img src="https://img-blog.csdnimg.cn/20200420163408968.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MzQ4ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr><ol><li>由于我的粗心大意吧在&lt;对齐&gt;中的“=居中对齐”写错了，应是“^居中对齐”<br>由于我的粗心大意吧在&lt;对齐&gt;中的“=居中对齐”写错了，应是“^居中对齐”<br>由于我的粗心大意吧在&lt;对齐&gt;中的“=居中对齐”写错了，应是“^居中对齐</li></ol><p> ***”<br>如何使用</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#前三个</span><span class="token operator">>></span><span class="token operator">></span>str <span class="token operator">=</span> <span class="token string">"武汉胜利了！中国胜利了!"</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&amp;#123;:=^30&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>武汉胜利了！中国胜利了<span class="token operator">!=</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&amp;#123;^30&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>        武汉胜利了！中国胜利了!         <span class="token comment" spellcheck="true">#当&lt;填充>省略时，默认空格填充</span><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&amp;#123;:=^&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>武汉胜利了！中国胜利了!<span class="token comment" spellcheck="true">#当&lt;宽度>省略时，默认字符串本身长度</span><span class="token comment" spellcheck="true">#得知&lt;对齐> 不可以省略    </span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200422171709896.png" alt="在这里插入图片描述"></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#后两个</span><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&amp;#123;:.2f&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">3.1415926</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">3.14</span><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&amp;#123;:,&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">654123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">654</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&amp;#123;:e&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">3.1415</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">3.141500e+00</span><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&amp;#123;:E&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">3.1415</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">3.141500E+00</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200422171736819.PNG" alt="在这里插入图片描述"></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#最后一个</span><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&amp;#123;0:b&amp;#125;,&amp;#123;0:c&amp;#125;,&amp;#123;0:d&amp;#125;,&amp;#123;0:o&amp;#125;,&amp;#123;0:x&amp;#125;,&amp;#123;0:X&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">1111011</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;,123,173,7b,7B</span><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&amp;#123;0:e&amp;#125;,&amp;#123;0:E&amp;#125;,&amp;#123;0:0f&amp;#125;,&amp;#123;0:%&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">3.1415</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">3.141500e+00</span><span class="token punctuation">,</span><span class="token number">3.141500E+00</span><span class="token punctuation">,</span><span class="token number">3.141500</span><span class="token punctuation">,</span><span class="token number">314.150000</span><span class="token operator">%</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/05/11/hello-world/"/>
      <url>2021/05/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python之random学习笔记</title>
      <link href="2021/05/10/python%E4%B9%8BWordcloud%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>2021/05/10/python%E4%B9%8BWordcloud%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><strong>python之random库学习笔记</strong></p><span id="more"></span><h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1,前言"></a>1,前言</h1><p>大家有没有在日常生活中接触过词语，提取一篇文章，进行分析、处理。可以更可观的了解这篇文章。怎么说，说不清。康康我的学习笔记吧。</p><h1 id="2-正题部分"><a href="#2-正题部分" class="headerlink" title="2,正题部分"></a>2,正题部分</h1><h2 id="1-Wordcloud库基本介绍"><a href="#1-Wordcloud库基本介绍" class="headerlink" title="1,Wordcloud库基本介绍"></a>1,Wordcloud库基本介绍</h2><ul><li>wordcloud是优秀的词云展示第三方库。</li><li>词云以词语展示为单位，更加直观艺术的展示文本。</li></ul><p>可以看出这是第三方库，需要安装。</p><p><img src="https://cdn.jsdelivr.net/gh/yanghuanh1314/MyPicture@master/%E8%AF%8D%E4%BA%91%E6%95%88%E6%9E%9C.5wdnb1zwtvg0.png" alt="词云效果"></p><p>啦啦啦，百度一下，你就知道，这就是他的效果。是不是富有艺术气息</p><p>怎么用呢？</p><h2 id="2-wordcloud库的安装"><a href="#2-wordcloud库的安装" class="headerlink" title="2,  wordcloud库的安装"></a>2,  wordcloud库的安装</h2><p>打开cmd命令行，输入：</p><pre class=" language-cmd"><code class="language-cmd">pip install wordcloud</code></pre><h2 id="3-Wordcloud库使用说明"><a href="#3-Wordcloud库使用说明" class="headerlink" title="3,Wordcloud库使用说明"></a>3,Wordcloud库使用说明</h2><p>安装上了，怎么使用呢？</p><ul><li>wordcloud库把词云当作Wordcloud对象。</li><li>Wordcloud.Wordcloud()代表一个文本对应的对象</li><li>可以根据文本中词语出现的频率等参数绘制词云。</li><li>词云的绘制形状、尺寸、颜色多可以设定。</li></ul><p>前两句我可能没有明白吗，后两句想必大家都知道了，例如一篇文章中，“喜欢”一词出现的频率最多，那么，他展示的大。展示的词云样式是可以自定义的，</p><h2 id="4-wordcloud库常规方法"><a href="#4-wordcloud库常规方法" class="headerlink" title="4,wordcloud库常规方法"></a>4,wordcloud库常规方法</h2><pre class=" language-python"><code class="language-python">w <span class="token operator">=</span> wordcloud<span class="token punctuation">.</span>wordcloud<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>以Wordcloud对象为基础，</li><li>配置参数、加载文本、输出文本</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>w.generate(txt)</td><td>向Wordcloud对象w中加载文本txt</td></tr><tr><td>w.to_file(filename)</td><td>将词云输出为图像文件，.png或.jpg格式</td></tr></tbody></table><p>所以目前这三句语句就可以绘制出一个词云</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> wordcloudw <span class="token operator">=</span> wordcloud<span class="token punctuation">.</span>wordcloud<span class="token punctuation">(</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span>generate<span class="token punctuation">(</span>txt<span class="token punctuation">)</span>w<span class="token punctuation">.</span>to_file<span class="token punctuation">(</span>pywordcloud<span class="token punctuation">.</span>jpg<span class="token punctuation">)</span></code></pre><p>那么，文本到词云在转换的过程中是怎么一回事呢</p><ol><li>分隔：以空格分隔单词。</li><li>统计：单词出现次数并过滤。</li><li>字体：根据统计配置字号</li><li>布局：颜色环境尺寸。</li></ol><h2 id="4-配置对象参数"><a href="#4-配置对象参数" class="headerlink" title="4,配置对象参数"></a>4,配置对象参数</h2><pre class=" language-python"><code class="language-python">w <span class="token operator">=</span> wordcloud<span class="token punctuation">.</span>wordcloud<span class="token punctuation">(</span><span class="token operator">&lt;</span>参数<span class="token operator">></span><span class="token punctuation">)</span></code></pre><p>看来不要小看这个参数，里面包含了好多。。。类似main()</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>width</td><td>指对词云对象生成图片的宽度，默认400像素。</td></tr><tr><td>height</td><td>指对词云对象生成图片的高度，默认200像素。</td></tr><tr><td>min_font_size</td><td>指定词云中字体的最小号，默认4号。</td></tr><tr><td>max_font_size</td><td>指定词云中字体的最大号，根据高亮自动调节。</td></tr><tr><td>font_stop</td><td>指定词云中字体字号的进步间隔，默认为1.</td></tr><tr><td>font_path</td><td>指定字体文件路径，默认None。</td></tr><tr><td>max_words</td><td>指定词云显示的最大单词数量，默认200.</td></tr><tr><td>stop_words</td><td>指定词云的排除词列表，即不显示的单词列表。</td></tr><tr><td>mask</td><td>指定词云形状，默认为长方形，需要引用imread()函数</td></tr><tr><td>background_ color</td><td>指定词云图片的背景颜色，默认黑色。</td></tr></tbody></table><p>把这些参数直接往里面套：</p><pre class=" language-python"><code class="language-python">w <span class="token operator">=</span> wordcloud<span class="token punctuation">.</span>wordcloud<span class="token punctuation">(</span>width<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>heigh<span class="token operator">=</span><span class="token number">50</span>\                       font_path<span class="token operator">=</span>msyh<span class="token punctuation">.</span>tcc<span class="token punctuation">)</span></code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>写完这些，对这些内容又熟悉了一遍。词云的用处还是很广的。小则分析一段文字，大则分析一些重要文件。通过图片更直观的了解一些内容。在这个视频流的时代，应该没有人喜欢看大段文字，反而是视频，图片。如果这样，清晰明了。</p><p>这就是以上内容，我的笔记。</p><p>谢谢您的，文章有错误，欢迎你的指正；如果对您有帮助，是我的荣幸。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown文档编写学习笔记</title>
      <link href="2021/02/20/Markdown%E6%96%87%E6%A1%A3%E7%BC%96%E5%86%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>2021/02/20/Markdown%E6%96%87%E6%A1%A3%E7%BC%96%E5%86%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1,前言"></a>1,前言</h1><p>为什么要写这个，前不久用hexo搭建个人博客。搭建完后，怎么写博客，这又是个老大难的问题。经过百度，和大佬交流发现了Markdown这个词汇，继续百度，嗯，可以用这个编剧博客文章。我默默地打开了菜鸟教程，翻看着，这玩意不像用Word写东西，还有很多语法需要学习。突然有点想放弃，七天从入门到放弃。就这，这不行啊！写份笔记，加深一下记忆。</p><h1 id="2-本文内容"><a href="#2-本文内容" class="headerlink" title="2,本文内容"></a>2,本文内容</h1><h2 id="2-1Markdown介绍"><a href="#2-1Markdown介绍" class="headerlink" title="2.1Markdown介绍"></a>2.1Markdown介绍</h2><p>Q1：什么是Markdown？</p><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档</p><p>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。</p><p>Markdown 编写的文档后缀为 ：.md, .markdown</p><p>以上是官方介绍，可是看出他就是个文本编辑器，只不过后缀名是.md，</p><p>Q2：Markdown的应用？</p><p>写电子书，博客，就想我现在写的这个。</p><h2 id="2-1Markdown标题"><a href="#2-1Markdown标题" class="headerlink" title="2.1Markdown标题"></a>2.1Markdown标题</h2><p><img src="Markdown%E6%96%87%E6%A1%A3%E7%BC%96%E5%86%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202021-02-24%20205246.png" alt="标题预览"></p><p>从上面的图片中可以整理到下面的表格</p><table><thead><tr><th align="center">名称</th><th align="center">md标记</th><th align="center">md格式</th></tr></thead><tbody><tr><td align="center">一级标题</td><td align="center">#</td><td align="center"># 这是一级标题</td></tr><tr><td align="center">二级标题</td><td align="center">##</td><td align="center">## 这是二级标题</td></tr><tr><td align="center">三级标题</td><td align="center">###</td><td align="center">### 这是三级标题</td></tr><tr><td align="center">四级标题</td><td align="center">####</td><td align="center">#### 这是三级标题</td></tr><tr><td align="center">五级标题</td><td align="center">#####</td><td align="center">##### 这是三级标题</td></tr><tr><td align="center">六级标题</td><td align="center">######</td><td align="center">###### 这是三级标题</td></tr></tbody></table><p>标题最多是六个，当第七第八时就是普通的了。</p><h2 id="2-2Markdown段落格式"><a href="#2-2Markdown段落格式" class="headerlink" title="2.2Markdown段落格式"></a>2.2Markdown段落格式</h2><h2 id="2-3Markdown列表"><a href="#2-3Markdown列表" class="headerlink" title="2.3Markdown列表"></a>2.3Markdown列表</h2><h2 id="2-4markdown区块"><a href="#2-4markdown区块" class="headerlink" title="2.4markdown区块"></a>2.4markdown区块</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客搭建学习笔记</title>
      <link href="2021/02/17/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>2021/02/17/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>今年</p><h1 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2 准备工作"></a>2 准备工作</h1><h2 id="2-1-git安装"><a href="#2-1-git安装" class="headerlink" title="2.1 git安装"></a>2.1 git安装</h2><h2 id="2-2-node-js安装"><a href="#2-2-node-js安装" class="headerlink" title="2.2 node.js安装"></a>2.2 node.js安装</h2><h2 id="2-3-hexo安装"><a href="#2-3-hexo安装" class="headerlink" title="2.3 hexo安装"></a>2.3 hexo安装</h2><h1 id="3-hexo博客初始化"><a href="#3-hexo博客初始化" class="headerlink" title="3 hexo博客初始化"></a>3 hexo博客初始化</h1><h2 id="3-1-相关指令介绍"><a href="#3-1-相关指令介绍" class="headerlink" title="3.1 相关指令介绍"></a>3.1 相关指令介绍</h2><h2 id="3-2-第一篇博客文章"><a href="#3-2-第一篇博客文章" class="headerlink" title="3.2 第一篇博客文章"></a>3.2 第一篇博客文章</h2><h2 id="3-3-部署hexo博客"><a href="#3-3-部署hexo博客" class="headerlink" title="3.3 部署hexo博客"></a>3.3 部署hexo博客</h2><h3 id="3-3-1-利用GitHub部署"><a href="#3-3-1-利用GitHub部署" class="headerlink" title="3.3.1 利用GitHub部署"></a>3.3.1 利用GitHub部署</h3><h3 id="3-3-2-利用gitee部署"><a href="#3-3-2-利用gitee部署" class="headerlink" title="3.3.2 利用gitee部署"></a>3.3.2 利用gitee部署</h3><h1 id="4-hexo博客主题修改"><a href="#4-hexo博客主题修改" class="headerlink" title="4 hexo博客主题修改"></a>4 hexo博客主题修改</h1><h1 id="5-总结及回顾"><a href="#5-总结及回顾" class="headerlink" title="5 总结及回顾"></a>5 总结及回顾</h1><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="2021/02/03/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>2021/02/03/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="我的第一篇博客"><a href="#我的第一篇博客" class="headerlink" title="我的第一篇博客"></a>我的第一篇博客</h1><span id="more"></span><p>Hello World！<br>路漫漫其修远兮，吾将上下而求索。<br>热爱、执着、探索······</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1293886117&auto=0&height=66"></iframe>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础语法之数字类型及操作篇</title>
      <link href="2021/01/31/Python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B9%8B%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B%E5%8F%8A%E6%93%8D%E4%BD%9C%E7%AF%87/"/>
      <url>2021/01/31/Python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B9%8B%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B%E5%8F%8A%E6%93%8D%E4%BD%9C%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p><strong>Python基础语法之数字类型及操作篇</strong></p><span id="more"></span><p>1,整数类型<br>①整数类型与数学中的整数的概念一致<br>②4种进制表示!<img src="https://img-blog.csdnimg.cn/20200223103833697.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MzQ4ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">③一般认为整数类型没有取值范围限制。</p><p>2，浮点数类型<br>①与数学中的实数概念一致，表示带有小数部分的值。Python有规定浮点数必须有小数部分，可以为0。<br>②浮点数的数值范围和小数精度受不同计算机系统的限制。<br>③科学计数法：规定以E或e作为幂的符号，以10为基数。<b>e<b>＝a×b∧10<br>3，数值运操作<img src="https://img-blog.csdnimg.cn/20200223153828377.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MzQ4ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class=" language-python"><code class="language-python">abs <span class="token punctuation">(</span>x<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#x的绝对值</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>abs<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">1</span></code></pre><pre class=" language-python"><code class="language-python">divmod<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#(x//y)，输出为二元组形式</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token keyword">print</span><span class="token punctuation">(</span>divmod<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">pow<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">[</span><span class="token punctuation">.</span>z<span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#（x**y）%z,[,]表示该参数可以省略，即pow (x**y)</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token keyword">print</span><span class="token punctuation">(</span>pow<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">8</span></code></pre><pre class=" language-python"><code class="language-python">round<span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">.</span>ndigits<span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#对x四舍五入，保留ndigits位小数</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token keyword">print</span><span class="token punctuation">(</span>round<span class="token punctuation">(</span><span class="token number">3.1456</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">3.146</span></code></pre><pre class=" language-python"><code class="language-python">max<span class="token punctuation">(</span>x1<span class="token punctuation">,</span>x2……xn<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#求x1,x2……xn的最大值，n没有限制</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token keyword">print</span><span class="token punctuation">(</span>max<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span> <span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">9</span></code></pre><pre class=" language-python"><code class="language-python">min<span class="token punctuation">(</span>x1<span class="token punctuation">,</span>x2……xn<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#求x1,x2……xn的最小值，n没有限制</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token keyword">print</span><span class="token punctuation">(</span>min<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span> <span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">1</span></code></pre><pre class=" language-python"><code class="language-python">float<span class="token punctuation">(</span>x<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#将x输出为浮点数，x可以为整数或字符串</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token keyword">print</span><span class="token punctuation">(</span>float<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">3.0</span></code></pre><pre class=" language-python"><code class="language-python">int<span class="token punctuation">(</span>x<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#将x输出为整数，x可以为浮点数或字符串</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token keyword">print</span><span class="token punctuation">(</span>int<span class="token punctuation">(</span><span class="token number">3.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">3</span></code></pre><pre class=" language-python"><code class="language-python">complex<span class="token punctuation">(</span>re<span class="token punctuation">[</span><span class="token punctuation">,</span>im<span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#生成一个复数，实根为re，虚部为im，re可以是整数、浮点数和字符串，im可以是整数、浮点数但不可以是字符串</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token keyword">print</span><span class="token punctuation">(</span>complex<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">+</span><span class="token number">12j</span><span class="token punctuation">)</span></code></pre><p>感谢看完my博客<br>my is a 自学 Python boy😃😃😃</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
